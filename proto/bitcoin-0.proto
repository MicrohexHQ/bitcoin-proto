// Bitcoin Protocol
// First swag

syntax = "proto3";
package bitcoin;

message Message {
	fixed32 magic = 1;
	string command = 2;
	uint32 payload_length = 3;
	uint32 checksum = 4;
	bytes payload = 5;
}

message Block {
	uint32 version = 1;
	bytes previous_block = 2;
	bytes merkle_root = 3;
	uint32 timestamp = 4;
	uint32 bits = 5;
	uint32 nonce = 6;
	repeated Transaction transactions = 8;
}

message Transaction {
	uint32 version = 1;
	repeated TransactionInput inputs = 2;
	repeated TransactionOutput outputs = 3;
	uint32 lock_time = 4;
}

message TransactionInput {
	bytes outpoint_ref = 1;
	uint32 outpoint_index = 2;
	bytes sig_script = 3;
	uint32 sequence = 4;
}

message TransactionOutput {
	uint32 value = 1;
	bytes pk_script = 2;
}

message NetAddress {
	uint32 timestamp = 1;
	uint64 services = 2;
	bytes ip_address = 3;
	uint32 port = 4;
}

message InventoryVector {
	uint32 type = 1;
	bytes hash_reference = 2;
}

message Version {
	uint32 version = 1;
	uint64 services = 2;
	uint64 timestamp = 3;
	NetAddress addr_to = 4;
	NetAddress addr_from = 5;
	uint64 nonce = 6;
	string user_agent = 7;
	uint32 start_height = 8;
	bool relay = 9;
}

message Verack { }

message Addr {
	repeated NetAddress address_list = 1;
}

message Inv {
	repeated InventoryVector vectors = 1;
}

message GetData {
	repeated InventoryVector vectors = 1;
}

message NotFound {
	repeated InventoryVector vectors = 1;
}

message GetBlocks {
	uint32 version = 1;
	repeated bytes block_locator_hashes = 2;
	bytes hash_stop = 3;
}

message GetHeaders {
	uint32 version = 1;
	repeated bytes block_locator_hashes = 2;
	bytes hash_stop = 3;
}

message GetAddr { }

message Mempool { }

message Ping {
	uint64 nonce = 1;
}

message Pong {
	uint64 nonce = 1;
}

message Alert {
	bytes payload = 1;
	bytes signature = 2;
}

message Reject {
	string message = 1;
	uint32 ccode = 2;
}

message FilterLoad {
	bytes filter = 1;
	uint32 number_of_hash_functions = 2;
	uint32 tweak_nonce = 3;
	uint32 flags = 4;
}

message FilterAdd {
	bytes data = 1;
}

message FilterClear { }

message MerkleBlock {
	uint32 version = 1;
	bytes previous_block = 2;
	bytes merkle_root = 3;
	uint32 timestamp = 4;
	uint32 bits = 5;
	uint32 nonce = 6;
	uint32 total_transactions = 7;
	repeated bytes hashes = 8;
	bytes flags = 9;
}
